<?php
require_once 'vendor/autoload.php';

use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

$spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load("release_config.xlsx"); 
if(@unlink('release_config.xlsx')==false)
{
	echo "Please close release_config.xlsx";
	exit();
}
$writer = new Xlsx($spreadsheet);
$writer->save('release_config.xlsx');

$data = $spreadsheet->getActiveSheet()->toArray(null,true,true,true); 
$mrc_spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load("mrc/mrc_template.xlsm"); 
$mrc_sheet = $mrc_spreadsheet->getActiveSheet();
$config_sheet = $spreadsheet->getActiveSheet();
$mrc_data = $mrc_spreadsheet->getActiveSheet()->toArray(null,true,true,true); 
$CELL_RELEASE_NUMBER='';
$CELL_RELEASE_VERSION='';
$CELL_RELEASE_CAPTAIN='';
$CELL_RELEASE_DATE='';
for($i=1;$i<=count($mrc_data);$i++)
{
	$row =  $mrc_data[$i];	
	foreach($row as $col=>$value)
	{
		if($value == '%RELEASE_NUMBER%')
			$CELL_RELEASE_NUMBER=$col.$i;
		else if($value == '%RELEASE_VERSION%')
			$CELL_RELEASE_VERSION=$col.$i;
		else if($value == '%RELEASE_CAPTAIN%')
			$CELL_RELEASE_CAPTAIN=$col.$i;
		else if($value == '%RELEASE_DATE%')
			$CELL_RELEASE_DATE=$col.$i;
			
	}
}
$releases = [];
$current_release=null;
$release_name = '';
for($i=1;$i<=count($data);$i++)
{
	$row =  $data[$i];
	if($i==1)
	{
		$release_name = $row['B'];
		continue;
	}
	if($i==2)
		continue;
	//var_dump($row);
	foreach($row as $col=>$value)
	{
		if($col == 'A')
		{
			if(trim($value)=='')
				continue;
			if(!isset($releases[$value]))
			{
				if(substr($value, 0, 1 ) === "#")
				{
					echo "Ignoring ".$value."\n";
					continue;
				}
				
				$releases[$value]=new \StdClass();
				$releases[$value]->number=$value;
				$releases[$value]->name = "@".$release_name;
				$releases[$value]->sheetrow=$i;
			}
			$current_release = $releases[$value];
		}
		else if($col == 'B')
		{
			if(trim($value)=='')
				continue;
			
			$current_release->esdm[]=$value;
			if(!file_exists('data/'.$value))
			{
				echo 'data/'.$value." Does not exist\n";
				exit();
			}
		}
		
		else if($col == 'C')
		{
			if(trim($value)=='')
				continue;
			$current_release->media[]=$value;
			if(!file_exists('data/'.$value))
			{
				echo 'data/'.$value." Does not exist\n";
				exit();
			}
		}
		
	}
}		
foreach($releases as $release)
{
	global $config_sheet,$spreadsheet;
	if(!file_exists('cache'))
		mkdir('cache');
	//echo 'https://release-api.wv.mentorg.com/release-api/release_detail/number/'.$release->number;
	if(!file_exists('cache/'.$release->number.".json"))
	{
		echo "Validating ".$release->number."\n";
		//echo 'https://release-api.wv.mentorg.com/release-api/release_detail/number/'.$release->number;
		$data = file_get_contents('https://release-api.wv.mentorg.com/release-api/release_detail/number/'.$release->number);
		//var_dump($data);
		if(strlen($data) == 0)
		{
			echo $release->number." Does not exist\n";
			exit();
		}
		$data = json_decode($data);
		if(!isset($data->medias))
		{
			 echo $release->number." Does not have media\n";
			 exit();
		}
		if( count($data->medias)==0)
		{
			 echo $release->number." Does not have media\n";
			 exit();
		}
		
		
		file_put_contents('cache/'.$release->number.".json",json_encode($data));
		//echo 'Found'."\n";
	}
	$data = file_get_contents('cache/'.$release->number.".json");
	$data = json_decode($data);
	
	$release->version = str_replace("\\","-",$data->releaseVersion);
	$release->version = str_replace("/","-",$release->version);
	$release->mediapn = $data->medias[0]->mediaPartNum;
	$release->captain = $data->createdByUser->firstName." ".$data->createdByUser->lastName;
	$release->fcsDate = $data->fcsDate;
	
	$config_sheet->setCellValue('E'.$release->sheetrow, $release->version);
	
	$writer = new Xlsx($spreadsheet);
	$writer->save('release_config.xlsx');
}

foreach($releases as $release)
{
	echo "Processing ".$release->number."  ".$release->version."\n";
	CreateESDM($release);
	CreateMEDIA($release);
	CreateMRC($release);
}
function CreateESDM($release)
{
	if(!file_exists($release->name))
		mkdir($release->name);
	
	if(!file_exists($release->name."/".$release->number."-".$release->version))
		mkdir($release->name."/".$release->number."-".$release->version);
	
	$folder = $release->name."/".$release->number."-".$release->version."/".$release->number."_esdm";
	delete_directory($folder);
	mkdir($folder);
	$checklist = '';
	$del = '';
	if(!isset($release->esdm))
	{
		echo "No ESDM Files\n";
		return;
	}
	foreach($release->esdm as $file)
	{
		$md5_file = 'data/'.$file.'.md5';
		$md5 = md5_file ('data/'.$file);
		if(file_exists($md5_file))
		{
			$cmd5 = file_get_contents('data/'.$md5_file);
			if($md5 != $cmd5)
			{
				echo $file." Computed MD5 [".$md5."] does not match with [".$cmd5."]";
				exit();
			}
			//ESDM_checklists.txt
		}
		copy('data/'.$file, $folder."/".$file);
		$checklist .= $del.$md5." ".$file;
		$del="\r\n";
	}
	file_put_contents($folder."/ESDM_checksums.txt",$checklist);
	
	
	//var_dump($release);
	//echo $checklist."\n";
	
}
function CreateMEDIA($release)
{
	$files = [];
	if(!isset($release->media))
	{
		echo "No MEDIA Files\n";
		return;
	}
	foreach($release->media as $file)
	{
		$md5_file = 'data/'.$file.'.md5';
		$md5 = md5_file ('data/'.$file);
		if(file_exists($md5_file))
		{
			$cmd5 = file_get_contents('data/'.$md5_file);
			if($md5 != $cmd5)
			{
				echo $file." Computed MD5 [".$md5."] does not match with [".$cmd5."]";
				exit();
			}
		}
		$files[] = $file;
	}
	
	$media_folder = $release->name."/".$release->number."-".$release->version."/".$release->number."_media";
	delete_directory($media_folder);
	mkdir($media_folder);
	$zip = new ZipArchive;
	
	$zipfilename = $media_folder."/".$release->mediapn.".zip";
	$retval = $zip->open($zipfilename , ZipArchive::CREATE);
	
	if ($retval=== TRUE)
	{
		foreach($files as $file)
		{
			$zip->addFile('data/'.$file,$file);
		}
		$zip->close();
	}
	else
	{
		echo "zip error ".$retval;
		exit();
	}
	$md5 = md5_file ($zipfilename );
	$checklist = $md5." ".$release->mediapn.".zip";
	file_put_contents($media_folder."/Media_checksums.txt",$checklist);
}
function str_replace_once($str_pattern, $str_replacement, $string)
{

    if (strpos($string, $str_pattern) !== false){
        $occurrence = strpos($string, $str_pattern);
        return substr_replace($string, $str_replacement, strpos($string, $str_pattern), strlen($str_pattern));
    }

    return $string;
}
	  
function CreateMRC($release)
{
	global $mrc_sheet, $mrc_spreadsheet;
	global $CELL_RELEASE_NUMBER,$CELL_RELEASE_VERSION,$CELL_RELEASE_CAPTAIN,$CELL_RELEASE_DATE;
	$folder = $release->name."/".$release->number."-".$release->version."/".$release->number."_mrc";
	delete_directory($folder);
	mkdir($folder);
	$mrc_sheet->setCellValue($CELL_RELEASE_NUMBER, $release->number);
	$mrc_sheet->setCellValue($CELL_RELEASE_VERSION, $release->version);
	$mrc_sheet->setCellValue($CELL_RELEASE_CAPTAIN, $release->captain);
	$mrc_sheet->setCellValue($CELL_RELEASE_DATE, $release->fcsDate);
	
	
	$writer = new Xlsx($mrc_spreadsheet);
	$writer->save($folder.'/mrc_'.$release->number.'.xlsm');
	
	$files = glob("mrc/*.*");
	//var_dump($files);
    foreach($files as $file)
	{
		if($file == 'mrc/mrc_template.xlsm')
			continue;
		
      $file_to_go = str_replace_once('mrc',$folder,$file);
	  //echo $file."\n";
	  //echo $file_to_go."\n";
      copy($file, $file_to_go);
    }
}
function delete_directory($dirname) {
	if (is_dir($dirname))
        $dir_handle = opendir($dirname);
	else
		return;
    if (!$dir_handle)
          return false;
    while($file = readdir($dir_handle)) {
           if ($file != "." && $file != "..") {
                if (!is_dir($dirname."/".$file))
                     unlink($dirname."/".$file);
                else
                     delete_directory($dirname.'/'.$file);
           }
     }
     closedir($dir_handle);
     rmdir($dirname);
     return true;
}

//var_dump($releases);	
//$file='mel-x64-ultrazed-eg-iocc-mel-11.0-patch-5.bin';
//echo md5_file ($file);

//https://release-api.wv.mentorg.com/release-api/release_detail/number/202003089

